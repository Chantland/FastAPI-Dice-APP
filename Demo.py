
from typing import Union, Optional, List
from urllib import response
from fastapi import FastAPI, Request, File, UploadFile, status

from fastapi.responses import HTMLResponse, RedirectResponse, FileResponse, Response
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

app = FastAPI()

app.mount("/static", StaticFiles(directory="static"), name="static")


templates = Jinja2Templates(directory="templates")

some_file_path = "static/images/J&E_Abby_Wedding-72y128x-1.png"



@app.get("/")
async def main():
    return FileResponse(some_file_path)


# @app.get(
#     "/image",

#     # Set what the media type will be in the autogenerated OpenAPI specification.
#     # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
#     responses = {
#         200: {
#             "content": {"image/png": {}}
#         }
#     }, response_class=Response)
# def get_image():
#     image_bytes: bytes = generate_cat_picture()
#     # media_type here sets the media type of the actual response sent to the client.
#     return Response(content=image_bytes, media_type="image/png")

# # working 1
# @app.post("/uploadfiles/")
# async def create_upload_file(request: Request, file: UploadFile, db: Session = Depends(get_db)):
#     url = app.url_path_for("main")
#     new_img = models.Pics(filename = file.filename)
#     db.add(new_img)
#     db.commit()
#     return RedirectResponse(url=url, status_code=status.HTTP_303_SEE_OTHER)
# <!-- <img src="/uploadfiles/" alt="Wedding outfit before dice" title="After"/> --> <!-- for working draft 1 -->

# # # working 2
# @app.post("/uploadfiles/")
# async def create_upload_file(request: Request, file: UploadFile, db: Session = Depends(get_db)):
#     url = app.url_path_for("main")

#     contents = await file.read()
#     nparr = np.fromstring(contents, np.uint8)
#     img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

#     size_x, size_y = img.shape[0:2]
#     #img_show(img) #may not be necessary but proof of concept,
#     cv2.imwrite("./static/images/placeholder.png", img)

#     new_img = models.Pics(filename = file.filename, size_x = size_x, size_y=size_y, data=img)
#     db.add(new_img)
#     db.commit()
#     return RedirectResponse(url=url, status_code=status.HTTP_303_SEE_OTHER)
# # # <!-- <img class= "optional_show" src="{{ url_for('static', path='images/placeholder.png') }}" alt="before" title="before" onerror="imgError(this);"/> --> 

# <script>
# function alert_Function() {
#     alert("The picture you chose cannot be subdivided. Either crop it or choose a different one");
#     var sassy = False;
# }
# window.onload = alert_Function();
# </script>



# <!--Script for entering error messages but I cannot sem to allow for variable to react to the sent template response  -->
# <!-- <script>
#     var sassy;
#     if (sassy){
#         error_item = document.createElement("div");
#         error_item.className="sassyness";
#         error_item.innerHTML=`
#         WARNING The picture you chose cannot be evenly subdivided. Either crop it or choose a different picture`;
#         document.getElementById("Main_Upload").appendChild(error_item);
#     } else {
#         console.log("did not work")
#     }
# </script> -->
